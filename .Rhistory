)
survfit2(Surv(enter_time, exit_time, status, type = "counting") ~ group,
data = kmData) |>
tbl_survfit(
probs = c(0.2, 0.3),
label_header = "Probs"
)
survfit2(Surv(enter_time, exit_time, status, type = "counting") ~ group,
data = kmData) |>
tbl_survfit(
probs = c(0.1, 0.2),
label_header = "Probs"
)
survfit2(Surv(enter_time, exit_time, status, type = "counting") ~ group,
data = kmData) |>
tbl_survfit(
times = c(50, 75),
label_header = "Probs"
)
survfit2(Surv(enter_time, exit_time, status, type = "counting") ~ group,
data = kmData) |>
tbl_survfit(
probs = 0.5,
label_header = "Probs"
)
#creating the survival object
sp <- survfit2(Surv(enter_time, exit_time, status, type = "counting") ~ group,
data = kmData)
sp |>
ggsurvfit() +
labs(x = "age", y = "Overall survival probability") +
ggtitle("Counting type and enter and exit times")+
add_confidence_interval() +
add_risktable()
gtsummary::tbl_survfit(
kmData,
y = "Surv(enter_time, exit_time, status)",
include = group,
probs = 0.5,
label_header = "**Median survival (95% CI)**"
)
sp |>
tbl_survfit(
probs = 0.5,
label_header = "Probs"
)
sp |>
tbl_survfit(
probs = 0.6,
label_header = "Probs"
)
sp |>
tbl_survfit(
probs = 0.8,
label_header = "Probs"
)
sp |>
tbl_survfit(
probs = 0.5,
label_header = "Probs"
)
#creating the survival object
sp <- survfit2(Surv(enter_time, exit_time, status, type = "counting") ~ group,
data = kmData)
sp |>
ggsurvfit() +
labs(x = "age", y = "Overall survival probability") +
ggtitle("Counting type and enter and exit times")+
add_confidence_interval() +
add_risktable()
#This calculation is wrong because it doesn't take into account censoring values. Which leads to underestimate survival.
kmData |>
filter(status==1) |>
summarise(
median_surv=median(exit_time)
)
sp |>
tbl_survfit(
probs = 0.5,
label_header = "Probs"
)
sp |>
tbl_survfit(
probs = 0.5,
label_header = "**Median survival (95% CI)**"
)
sp
kmData |>
group_by(group) |>
summarise(
deaths=sum(status)
)
kmData |>
crosstable(group) |>
as_flextable()
kmData |>
crosstable(group, by=status) |>
as_flextable()
kmData |>
group_by(group) |>
summarise(
deaths=sum(status)
)
kmData |>
crosstable(group, by=status) |>
as_flextable()
sp |>
tbl_survfit(
probs = 0.7,
label_header = "**Median survival (95% CI)**"
)
sp |>
tbl_survfit(
probs = 0.75,
label_header = "**Median survival (95% CI)**"
)
sp |>
tbl_survfit(
probs = 0.25,
label_header = "**Median survival (95% CI)**"
)
sp |>
tbl_survfit(
probs = 0.5,
label_header = "**Median survival (95% CI)**"
)
sp |>
tbl_survfit(
probs = c(0.5, 0.3),
label_header = "**{probs} (95% CI)**"
)
sp |>
tbl_survfit(
probs = c(0.5, 0.3),
label_header = "**{{probs}} (95% CI)**"
)
sp |>
tbl_survfit(
probs = c(0.5, 0.3),
label_header = "**{prob} (95% CI)**"
)
lung
#| label: imports
library(survival)
lung
library(condsurv)
renv::install("condsurv")
remotes::install_github("zabore/condsurv")
renv::install("remotes")
remotes::install_github("zabore/condsurv")
fit1 <- survfit(Surv(time, status) ~ 1, data = lung)
prob_times <- seq(365.25, 182.625 * 4, 182.625)
purrr::map_df(
prob_times,
~conditional_surv_est(
basekm = fit1,
t1 = 182.625,
t2 = .x)
) %>%
mutate(months = round(prob_times / 30.4)) %>%
select(months, everything()) %>%
kable()
purrr::map_df(
prob_times,
~conditional_surv_est(
basekm = fit1,
t1 = 182.625,
t2 = .x)
) %>%
mutate(months = round(prob_times / 30.4)) %>%
select(months, everything()) %>%
gt()
renv::install("kable")
purrr::map_df(
prob_times,
~conditional_surv_est(
basekm = fit1,
t1 = 182.625,
t2 = .x)
) %>%
mutate(months = round(prob_times / 30.4)) %>%
select(months, everything()) %>%
kable()
library(knitr)
purrr::map_df(
prob_times,
~conditional_surv_est(
basekm = fit1,
t1 = 182.625,
t2 = .x)
) %>%
mutate(months = round(prob_times / 30.4)) %>%
select(months, everything()) %>%
kable()
?conditional_surv_est
?condsurv
library(condsurv)
fit1 <- survfit(Surv(time, status) ~ 1, data = lung)
prob_times <- seq(365.25, 182.625 * 4, 182.625)
purrr::map_df(
prob_times,
~conditional_surv_est(
basekm = fit1,
t1 = 182.625,
t2 = .x)
) %>%
mutate(months = round(prob_times / 30.4)) %>%
select(months, everything()) %>%
kable()
gg_conditional_surv(
basekm = fit1,
at = prob_times,
main = "Conditional survival in lung data",
xlab = "Days"
) +
labs(color = "Conditional time")
?conditional_surv_est
kmData
kmData |>
crosstable(enter_time, by=group) |>
as_flextable()
lung
View(kmData)
kmData |> filter(status==1) |>
ggplot(aes(x=exit_time)) +
geom_histogram()
kmData |> filter(status==1) |>
ggplot(aes(x=exit_time, fill=group)) +
geom_histogram(alpha=0.5)
kmData |> filter(status==1) |>
ggplot(aes(x=exit_time, fill=group)) +
geom_histogram(alpha=0.5) +
theme_classic()
Surv()
Surv
head(kmData)
table(kmData$enter_date)
kmData |> filter(enter_date!=as.Date("2022-01-01"))
sampled_df <- kmData %>% sample_n(10)
sampled_df
library(chron)
library(snowfall)
library(snow)
library(rlecuyer)
library(tidyverse)
library(lubridate)
library(ggplot2)
library(scales)
library(ggsurvfit)
library(crosstable)
rm(list=ls())
transition_data=tibble(
from = c("Mild", "Mild","Mild","Moderate","Moderate","Moderate", "Severe", "Severe","Severe","Severe", "Transplant"),
to = c("Moderate", "Severe","Dead","Mild", "Severe","Dead", "Mild", "Moderate", "Dead","Transplant","Dead"),
assumptions=c("","","Limited to age > 16 years",
"","","Limited to age > 16 years",
"","","Limited to age > 16 years","Limited to age > 16 years",
"Limited to age > 16 years"
),
Coeff = c("I (−3.870427 + 0.0130938 * age)","0","I (−6.26)",
"I (−1.323925 − 0.0409952 * age)", "I (−2.259841 - 0.0345258 * age)", "I (−4.477337)",
"0","I (−2.599317)","I (−2.766158)","I (−2.0)",
"I (−3.218876)"),
Optimistic = c(1, 1, 1, 0, 1, 1, 0, 0, 0.7, 0.9, 0),
Custom = rep(0,11)
)
newcases_ages_data=tibble(
age_range=c('0-1','1-2','2-18','18-40'),
prob=c(0.672,0.103,0.155,0.07)
)
input_newCases=87
input_prop508=97.6
input_breaks=2
#parsing the dates as Date Objects, just in case
start_date=as.Date("2022-01-01")
end_date=as.Date("2025-12-31")
new_subjects=86
selected_col=2 # to use optimistic scenario
erDF508=as.numeric(transition_data[,selected_col+3] |> pull())
init_data <- read.csv(file = "SimApp/data/defaultData.csv")
source('SimApp/r/auxFctMicSim.r')
source('SimApp/r/micSim.r')
source('SimApp/r/sim_functions.r')
n_years=year(end_date)-year(start_date)+1
# Probabilities by age range. These constants were estimated in EDA-Simulation.qmd file.
# We assume that in our simulations the largest age of diagnosis is going to be 40 years old.
# inmigr_probs=tibble(age_range=c('0-1','1-2','2-18','18-40'), prob=c(0.672,0.103,0.155,0.069))
inmigr_probs=newcases_ages_data
# Getting the number in each age range
inmigr_probs=inmigr_probs %>% mutate(
n=as.integer(prob*new_subjects)
)
# ages 0-1
immigrPop0 <- immigrAgeGroupGeneration(Id=1, inmigr_probs, 0,1, n_years)
head(immigrPop0 |> mutate(age=as.numeric((immigrDate-birthDate)/365)) ,10)
immigrPop0 |> mutate(age=as.numeric((immigrDate-birthDate)/365)) |>
crosstable(age) |> as_flextable()
# ages 1-2
immigrPop1 <- immigrAgeGroupGeneration(Id=2, inmigr_probs, 1,2, n_years)
head(immigrPop1 |> mutate(age=as.numeric((immigrDate-birthDate)/365)) ,10)
immigrPop1 |> mutate(age=as.numeric((immigrDate-birthDate)/365)) |>
crosstable(age) |> as_flextable()
# ages 2-18
immigrPop2 <- immigrAgeGroupGeneration(Id=3, inmigr_probs, 2,18, n_years)
head(immigrPop2 |> mutate(age=as.numeric((immigrDate-birthDate)/365)) ,10)
immigrPop2 |> mutate(age=as.numeric((immigrDate-birthDate)/365)) |>
crosstable(age) |> as_flextable()
# ages 18-40
immigrPop3 <- immigrAgeGroupGeneration(Id=4, inmigr_probs, 18,40, n_years)
head(immigrPop3 |> mutate(age=as.numeric((immigrDate-birthDate)/365)) ,10)
immigrPop3 |> mutate(age=as.numeric((immigrDate-birthDate)/365)) |>
crosstable(age) |> as_flextable()
rm(immigrPop0, immigrPop1, immigrPop2, immigrPop3)
imm_pop=build_immigr_pop(start_date, end_date, new_subjects, lastID=100, newcases_ages_data)
head(imm_pop ,10)
imm_pop |> mutate(age=as.numeric((as.Date(immigrDate, format = "%Y%m%d")-as.Date(birthDate, format = "%Y%m%d"))/365)) |>
crosstable(age) |> as_flextable()
max(imm_pop |> pull(ID))
rm(imm_pop)
# function(data, start_date, end_date, nIter, period_length, new_cftr, new_0cftr, eR_vector, inmigr_probs) {
# Defining Inputs
data=init_data
# nIter is not used because we are trying only one iteration
period_length=input_breaks
eR_vector=1-erDF508
prop508=input_prop508/100
new_cftr=as.integer(input_newCases*prop508)
new_0cftr=as.integer(input_newCases*(1-prop508))
initData_cftr = data |> filter(genotype=="cftr") |> select(!genotype)
initData_0cftr = data |> filter(genotype=="non_cftr") |> select(!genotype)
# Constructing a new initial population for cftr group
initPop_cftr=initData_cftr %>%
mutate(
birthDate = as.double(gsub(pattern = "-", replacement = "", birthDate)),
) %>% filter(initState!='dead' & initState!='loss')
# Converting from tibble to dataframe
# if it stays as tibble the following error occurs:
# Error in getInDays(initPop[, "birthDate"]) :
#  'list' object cannot be coerced to type 'double'
initPop_cftr=as.data.frame(initPop_cftr)
# Constructing a new initial population for non_cftr group
initPop_0cftr=initData_0cftr %>%
mutate(
birthDate = gsub(pattern = "-", replacement = "", birthDate),
) %>% filter(initState!='dead' & initState!='loss')
# Converting from tibble to dataframe
# if it stays as tibble the following error occurs:
# Error in getInDays(initPop[, "birthDate"]) :
#  'list' object cannot be coerced to type 'double'
initPop_0cftr=as.data.frame(initPop_0cftr)
## Generating immigration groups
# for patients without cftr mutation
lastID=max(initPop_0cftr$ID)
inmigrPop_0cftr=build_immigr_pop(start_date, end_date, new_0cftr,lastID, inmigr_probs)
# for patients with cftr mutation
lastID=max(initPop_cftr$ID)
inmigrPop_cftr=build_immigr_pop(start_date, end_date, new_cftr,lastID, inmigr_probs)
# DEFINING TRANSITION PROBABILITIES #
transFuns <- setTransitionFunctions(eR_vector)
# Running simulation for non-cftr patients
transitions_0cftr=cf_simulation(start_date, end_date, initPop=initPop_0cftr, immigrPop=inmigrPop_0cftr,'0cftr',transFuns)
head(transitions_0cftr,10)
tail(transitions_0cftr,10)
transitions_0cftr |> filter(To!="mild" & !is.na(To))
## Running simulation for cftr patients
transitions_cftr=cf_simulation(start_date, end_date, initPop=initPop_cftr, immigrPop=inmigrPop_cftr,'cftr',transFuns)
# Joining the datasets
popcftr_long=Join_into_Longi(initPop_cftr,transitions_cftr,inmigrPop_cftr,start_date)
pop0cftr_long=Join_into_Longi(initPop_0cftr,transitions_0cftr,inmigrPop_0cftr,start_date)
#defining iteration
i=1
# Formatting and merging with initial datasets for number of patients
endData = formattingForSummary1(initData_cftr,popcftr_long,initData_0cftr,pop0cftr_long,period_length,start_date,end_date,i)
head(endData)
endData |>
crosstable(state_at_2023, by=group, percent_pattern = " {n} ({p_col})", total="col") |> as_flextable()
endData |>
crosstable(state_at_2025, by=group, percent_pattern = " {n} ({p_col})", total="col") |> as_flextable()
head(popcftr_long |> filter(ID==max(ID)))
# Formatting and merging with initial datasets for survival analysis
endData2 = formattingForSummary2(initData_cftr,popcftr_long,initData_0cftr,pop0cftr_long,i)
endData2 |>
crosstable(new_state, by=group, percent_pattern = " {n} ({p_col})") |> as_flextable()
kmData=endData2 |>
mutate(
current_date = if_else(new_state==0, end_date, current_date),
time=round(as.numeric(difftime(current_date,birthDate, units="days")/365),2),
group=as.factor(group)
) |> rename(
status=new_state
)
kmData |> filter(status==1) |> crosstable(time, by=group) |> as_flextable()
kmData |> filter(status==0) |> crosstable(time, by=group) |> as_flextable()
temp_kmData = kmData |> filter(status==1, group=='non_cftr')
kmData |> filter(is.na(initState))
sp <- summary(survfit2(Surv(time, status) ~ group, data = kmData |> filter(iteration==i)), times = c(seq(0, 90, by = 2)))
kmResults=tibble(time=sp$time, atRisk=sp$n.risk, nEvents=sp$n.event, survival=sp$surv, group=sp$strata, iteration=i)
# summarizing
kmResults = kmResults |> mutate(
group=str_remove(group, "group=")
) |> group_by(time, group) |>
summarise(
survival=mean(survival),
.groups="drop"
)
kmResults
## Preparing Inputs
# Formatting and merging with initial datasets for survival analysis
simResults2 = formattingForSummary2(initData_cftr,popcftr_long,initData_0cftr,pop0cftr_long,1)
simResults2
kmData=simResults2 |>
mutate(
current_date = if_else(new_state==0, end_date, current_date),
exit_time=round(as.numeric(difftime(current_date,birthDate, units="days")/365),2),
enter_time=round(as.numeric(difftime(enter_date,birthDate, units="days")/365),2),
group=as.factor(group)
) |> rename(
status=new_state
)
sp <- summary(survfit2(
Surv(enter_time, exit_time, status) ~ group,
data = kmData |> filter(iteration == i)
), times = c(seq(0, 90, by = 2)))
sp
sp |>
ggsurvfit() +
labs(x = "age", y = "Overall survival probability")
sp |>
ggplot(aes(x = time, y = survival, colour = group)) +
geom_step(direction = "hv") +
geom_hline(yintercept = 0.5,
linetype = "dashed",
color = "gray") +
theme_classic() +
labs(y = paste("Survival Probaility at ", toYear(), sep = ""),
x = "Time (Age)") +
scale_colour_brewer(palette = "Set1", name = "") +
theme(legend.position = "bottom") +
theme(
legend.text = element_text(size = 14),
# Adjust the size as needed
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14)
) +
scale_x_continuous(limits = c(0, 80))
dataKM = tibble(time=sp$time, atRisk=sp$n.risk, nEvents=sp$n.event, survival=sp$surv, group=sp$strata, iteration=i)
dataKM |>
ggplot(aes(x = time, y = survival, colour = group)) +
geom_step(direction = "hv") +
geom_hline(yintercept = 0.5,
linetype = "dashed",
color = "gray") +
theme_classic() +
labs(y = paste("Survival Probaility at ", toYear(), sep = ""),
x = "Time (Age)") +
scale_colour_brewer(palette = "Set1", name = "") +
theme(legend.position = "bottom") +
theme(
legend.text = element_text(size = 14),
# Adjust the size as needed
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14)
) +
scale_x_continuous(limits = c(0, 80))
dataKM |>
ggplot(aes(x = time, y = survival, colour = group)) +
geom_step(direction = "hv") +
geom_hline(yintercept = 0.5,
linetype = "dashed",
color = "gray") +
theme_classic() +
labs(y = paste("Survival Probaility at ", year(end_date), sep = ""),
x = "Time (Age)") +
scale_colour_brewer(palette = "Set1", name = "") +
theme(legend.position = "bottom") +
theme(
legend.text = element_text(size = 14),
# Adjust the size as needed
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14)
) +
scale_x_continuous(limits = c(0, 80))
#creating the survival object
sp <- survfit2(Surv(enter_time, exit_time, status, type = "counting") ~ group,
data = kmData)
sp |>
ggsurvfit() +
labs(x = "age", y = "Overall survival probability") +
ggtitle("Counting type and enter and exit times")
shiny::runApp('SimApp')
runApp('SimApp')
runApp('SimApp')
runApp('SimApp')
runApp('SimApp')
renv::install("auth0")
auth0::use_auth0()
options(shiny.port=8080)
runApp('SimApp')
runApp('SimApp')
paste0('https://', Sys.getenv('AUTH0_USER'), '.auth0.com')
Sys.getenv("AUTH0_KEY")
Sys.getenv("AUTH0_KEY")
normalizePath("~")
Sys.getenv("AUTH0_KEY")
Sys.getenv("AUTH0_KEY")
Sys.getenv("AUTH0_KEY")
Sys.getenv("AUTH0_KEY")
git status
Sys.getenv("AUTH0_KEY")
Sys.getenv("AUTH0_KEY")
Sys.getenv("AUTH0_KEY")
shiny::runApp()
